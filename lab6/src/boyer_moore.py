def get_bad_match(pattern):
    # Визначення функції get_bad_match для створення таблиці поганих відповідей.
    d = {pattern[-1]: len(pattern)}
    # Ініціалізація словника d з останнього символу патерну та його відстані до кінця патерну.
    for i in range(len(pattern) - 1):
        # Ітерація по всіх символах патерну, крім останнього.
        d[pattern[i]] = len(pattern) - i - 1
        # Додавання до словника d символу патерну та його відстані до кінця патерну.
    return d
    # Повертаємо словник d з таблицею поганих відповідей.

def boyer_moore(string, substring):
    # Визначення функції boyer_moore для пошуку всіх входжень підрядка в рядок за допомогою алгоритму Бойера-Мура.
    
    m = len(substring)
    # Довжина підрядка.
    n = len(string)
    # Довжина рядка.

    bad_match = get_bad_match(substring)
    # Створення таблиці поганих відповідей для підрядка.

    result = []
    # Ініціалізація списку для зберігання індексів, де знайдено підрядок.

    i = 0
    # Ініціалізація змінної для індексу в рядку.
    while i <= n - m:
        # Цикл, який продовжується до тих пір, поки можливо розглянути підрядок в межах рядка.
        
        j = m - 1
        # Ініціалізація змінної для індексу в підрядку.

        while j >= 0 and substring[j] == string[i + j]:
            # Цикл для знаходження відповідності між підрядком і підрядком рядка.
            j -= 1
            # Зменшення значення j, поки відповідність триває.

        if j < 0:
            # Умова, коли відповідність знайдена (всі символи підрядка співпадають з рядком).
            result.append(i)
            # Додаємо індекс, де знайдено підрядок, до результату.

            if string[i + j] in bad_match.keys():
                # Перевіряємо, чи символ, що знаходиться за межами підрядка, має запис у таблиці поганих відповідей.
                i += bad_match[string[i + m]] if i + m < n else 1
                # Якщо так, то зсуваємо індекс на відстань з таблиці поганих відповідей, якщо індекс + довжина підрядка менше за довжину рядка, інакше зсуваємо на 1.
            else:
                i += m
                # Якщо символу немає у таблиці поганих відповідей, зсуваємо індекс на довжину підрядка.
        else:
            if string[i + j] in bad_match.keys():
                # Перевіряємо, чи символ, що знаходиться за межами підрядка, має запис у таблиці поганих відповідей.
                i += bad_match[string[i + j]]
                # Зсуваємо індекс на відстань з таблиці поганих відповідей.
            else:
                i += m
                # Якщо символу немає у таблиці поганих відповідей, зсуваємо індекс на довжину підрядка.

    return result
    # Повертаємо список з індексами, де знайдено підрядок.